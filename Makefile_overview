######################################
# Makefile with explanation
# Joseph Powers
#####################################

# See end of this file for an overview of makefiles. 

##############################################################################
############################## DEFINE VARIABLES ##############################
##############################################################################

# set variables for your project subdirectories
RAW = ./raw 
MUN = ./munge
DAT = ./data
ANL = ./analysis
REP = ./reports

# VPATH sets the order in which to search subdirectories for prereqs & targets
VPATH = $(RAW) $(MUN) $(DAT) $(ANL) $(REP)

# generate html report from Rmd file...
RENDER = Rscript -e "require(rmarkdown); render('$<')" 
# ... and move it to "reports" directory
RENDREP = $(RENDER); mv $(<:.Rmd=.html) $(REP)

# Run Rmd without generating .md or report
RPURL = Rscript -e "f <- tempfile(); require(knitr); purl('$<', output = f); \
source(f, echo = TRUE)"

# run Rmd scripts without generating report
KNIT = Rscript -e "require(knitr); knit('$<')" 

##############################################################################
###################### ALL: A LIST OF ULTIMATE TARGETS #######################
##############################################################################

# list essential target outputs here
all: important.html
	
.PHONY: all

##############################################################################
############################## GENERATE REPORTS ##############################
##############################################################################

#501_corr_table.html: 501_corr_table.Rmd ds_ex5.rds
#	$(RENDREP)

#500_corr_table.html: 500_corr_table.Rmd ds_ex5.rds
#	$(RENDREP)

#ds_ex5.rds: 300_create_ds_ex5.Rmd ds_ex4.rds \
ds_ex3.rds
#	$(RPURL)
	
#ds_ex3.rds: 210_create_ds_ex3.Rmd ds_ex2.rds
#	$(RPURL)
	
#ds_ex2.rds: 200_create_ds_ex2.Rmd \
../raw/2019-02-01_ds_rand.rds \
../raw/2019-02-02_ds_rand.rds
#	$(RPURL)
	
#ds_ex1.rds: 100_ds_ex1.Rmd \
Terribly\ Named\ File.xlsx
#	$(RPURL)
	
##############################################################################
######################## START OVER WITH A CLEAN SLATE #######################
##############################################################################

clean:
	rm -f $(REP)/*.html $(DAT)/*.rds *.md
	
.PHONY: clean

# clean reports folder
cr:
	rm -f $(REP)/*.html $(ANL)/*.html 
	
.PHONY: cr

##############################################################################
########################## AN OVERVIEW OF MAKEFILES ##########################
##############################################################################

# Essential jargon:
# $() calls a variable
# $< calls the 1st prerequisite in a rule
# $^ calls all the prerequisites in a rule
# $@ calls the target of a rule

# Makefiles are a record of how your data project can be recreated. In a typical 
# data project you will read in raw data from databases, xlsx and csv files, 
# then munge that data into shape for your analysis, then generate reports of 
# your findings. When you're new to working with data you might have performed 
# all of these steps in one enormous Rscript of 1000+ lines. You probably 
# even had several of these enormous files and found it difficult to keep track
# of when data was changed and in what order your scripts needed to 
# run. Makefiles and the subdirectories they often employ are a way to avoid 
# that confusion. Makefiles encourage you to write shorter scripts with targeted 
# outputs, and they encourage you to save your data, scripts, and outputs in a 
# routine format. 

# Whenever I start a new data project in R I create a new folder (aka directory), 
# and within that directory I create 6 folders: 
#     "raw" for my raw data
#     "munge" for the scripts that massage my raw data into shape for analysis
#     "data" to save and retrieve munged data for further munging and analysis
#     "analysis" for analysis
#     "reports" for the output of analysis

# While this process seems linear, it's actually very flexible and iterative. 
# I constantly remunge after I've performed some analysis or new data arrives. 
# The beauty of a makefile is that it keeps all of the dependencies clear. 
# For instance, my makefile will say what data files and analysis scripts were 
# used to generate a report. If any of those data files or analysis scripts 
# change, make will rebuild the report. Make will only rebuild outputs whose 
# prerequites have changed. That's the efficiency of make. 

# Makefiles are compused of rules in this format: 

# target: prerequisite_1 prerequisite_2 ... prerequisite_n
#	  command_1
#	  command_2
#	  ... # NOTE that all commands are tab-indented.
#	  command_n

# When used in R, 
#  "target" will be an output like html or pdf, .Rdata, csv, or .rds files
#  "prerequisites" are typically R or Rmd files and data files
#  "commands" are functions that run files e.g. Rscript(), render(), & knit()
#  NOTE that the target of one rule (such as a target that is a datafile) will 
#  often be a prerequisite for a later rule that builds something from it.

# A makefile rule can utilize files from different subdirectories: 
# reports/myreport.html: analysis/myreport.Rmd data/mydata.rds
# 	Rscript -e "require(rmarkdown); render('myreport.Rmd')" 
# 	mv analysis/500_corr_table.html reports

# My actual makefile used variables like $(REP) in place of explicit subdirectory 
# names like "./reports". Using variables in makefiles will reduce the need for 
# retyping subdirectory names and decrease the chance for typos. 

# OVERVIEW OF HOW MAKEFILES MAKE:
# Your makefile should be named "makefile" and saved in the project directory.
# In your terminal, navigate to that project directory, and then type "make".
# If any prerequisite has become newer than its target (e.g., because you changed 
# a script or dataset that the target is built from), make will rerun the rule(s) 
# that contain that prerequisite. This may trigger other rules to
# run if their prerequites were the targets of rules that just reran. Typing 
# "make clean" in the terminal will wipe out any files matching the patterns 
# you've indicated in the rule for "make clean"